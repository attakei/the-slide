===========================
Mastering Sphinx Extensions
===========================

.. revealjs-section::
   :data-background-image: _static/background/1.png

.. revealjs-notes:: 

   Thank you for audience.
   I am Starting talk about <title name>.

Enhancing the Document Builder to Create Presentations

Introduction
============

Speaker introduction
--------------------

.. revealjs-notes:: 

   My name is Kazuya Takei.
   I work as a software engineer in Japan.
   In my free time, I mainly write Sphinx extensions as a hobby.
   My birthday was three days ago, and I've decided to take on a new challenge in the new year.
   
   私の名前は「武居和也」です。
   日本でソフトウェアエンジニアとして働いています。
   プライベートでは、主にSphinx拡張を趣味で書いています。
   3日前が誕生日でしたが、新しい年に新しい挑戦をすることになりました。

.. container:: flex

   .. container:: size-2

      * Kazuya Takei ( ``@attakei`` )
      * Software engineer using Python in Japan
      * Sphinx lover and Sphinx extensions writer

   .. container:: size-1

      .. figure:: https://www.attakei.net/_static/images/icon-attakei.jpg
 
.. revealjs-fragments:: 

   **My birth is Feb, 27th (3days ago!)**

Outline of this talk
--------------------

.. revealjs-notes:: 

    Here is the outline of this talk.
    First, I will talk about an overview of Sphinnx and how it can be extended.
    Next, I will talk about sphinx-revealjs, which is the basis of this talk.
    Finally, you will see a showcase of presentation content that uses sphinx-revealjs.

    今回のトークのアウトラインです。
    最初に、Sphinnxの概要と拡張の仕組みについて話します。
    次に、今回のベースとなるsphinx-revealjsについての話をします。
    最後に、sphinx-revealjsを利用した、プレゼンテーションコンテンツのショーケースを見てもらいます。

* About Sphinx with advanced topic than standard usage.
* Approach to build presentations by Sphinx using sphinx-revealjs.
* Show case for power of Sphinx and sphinx-revealjs.

Excuse me
---------

.. revealjs-notes::

   I'm not very good at English.
   If you can't hear me well, please send me questions later via text on social media.
   I'll try to answer as best I can.
   
   私は英語があまりできる方ではありません。
   もし自分がうまく聞き取れなさそうであれば、後ほどSNSなどにテキストで質問を投げかけてください。
   可能な限り答えます。

* I am not good to use English.
* Please post questions as text if you can.

  * https://x.com/attakei
  * https://github.com/attakei/slides

Sphinx overview
===============

.. revealjs-notes:: 

   First, let's start with an introduction to Sphinx.

    まずは、Sphinxの紹介から始めます。

Ask questions for you
---------------------

.. revealjs-notes:: 

   Since we're here, let me ask a quick question.
   If it's "yes," please raise your hand.
   -
   Those of you who raise your hand until the end may already be familiar with the content.
   ---
   せっかくなので、簡単な質問を投げさせてください。
   もしYesであれば手を上げてください。
   最後まで手を上げた人は、しばらく知っている内容が続くかもしれません。

Please raise a hand if Yes.

.. revealjs-fragments:: 

   * Do you know Sphinx?
   * Do you see document generated by Sphinx?
   * Do you write document by Sphinx?

What is Sphinx?
---------------

.. revealjs-notes:: 

   Sphinx is a Python documentation generator.
   It produces various outputs based on a plain text source.
   It uses reStructuredText as its source and provides many functions.
   ---
   Sphinxは「Python製のドキュメントジェネレーター」です。
   プレーンテキストのソースをもとに、様々な出力を行います。
   ソースにreStructuredTextを用いつつ、多くの機能を提供します。

.. container:: flex
   
   .. container:: size-1

      .. figure:: _static/images/sphinx-logo.svg

   .. container:: size-2

      Sphinx is "documentation generator" written by Python.

      * Convert document sources into readable style output.
      * Provide features for documentation using reStructuredText.

.. revealjs-break::

.. revealjs-notes:: 

   Sphinx supports a variety of file input and output.
   Input sources can include reStructuredText and Markdown.
   Output destinations include many types, including HTML, EPUB, and PDF.
   ---
   Sphinxは様々なファイルの入出力に対応しています。
   入力ソースとしては、reStructuredTextやMarkdownを利用できます。
   出力先としては、HTML、EPUB、PDFを始め、多くの種類があります。

.. container:: flex
   
   .. container:: size-1

      .. figure:: _static/images/sphinx-logo.svg

   .. container:: size-2

      Sphinx supports multiple inputs and outputs.
      
      * Input: reStructuredText, Markdown, and more.
      * Output: HTML, PDF, EPUB, mandoc, and more.

.. revealjs-break::

.. revealjs-notes:: 

   These are products with similar positions.
   As for MkDocs, it is often used for generating documentation in other Python projects as well.
   ---
   これらは、似たポジションを持つプロダクトです。
   MkDocsについては他のPythonプロジェクトでもドキュメント生成に採用されていることが多いでしょう。

Appendix: Related products

* Pelican (written by Python)
* MkDocs (written by Python)
* Pandoc
* Hugo
* Astro

Made in Sphinx
--------------

.. revealjs-notes:: 

   Sphinx is used by many Python projects to generate documentation.
   ---
   Sphinxは様々なPythonプロジェクトでドキュメント生成に利用されています。

Python and third party projects:

.. container:: r-stack

   .. revealjs-fragments::

      .. figure:: _static/images/screenshot-python-doc.png
         :width: 80%
   
      .. figure:: _static/images/screenshot-django-doc.png
         :width: 80%

      .. figure:: _static/images/screenshot-numpy-doc.png
         :width: 80%

..
   * Python documentation
   * Django documentation
   * Documentations of PyData projects.

.. revealjs-break::

.. revealjs-notes:: 

   Sphinx is also used in products that are not Python-related.
   phpMyAdmin: A PHP-based WebUI for MySQL
   Fortran: A programming language for scientific computing
   ---
   SphinxはPython関連ではないプロダクトでも使われています。
   phpMyAdmin: PHP製のMySQL用WebUI
   Fortran: 科学技術計算向けのプログラミング言語

Not Python:

.. container:: r-stack

   .. revealjs-fragments::

      .. figure:: _static/images/screenshot-linux-kernel.png
         :width: 70%
   
      .. figure:: _static/images/screenshot-phpmyadmin-manual.png
         :width: 70%

      .. figure:: _static/images/screenshot-fortran-website.png
         :width: 60%

..
   * Linux Kernel
   * phpMyAdmin (Ib application to manage MySQL by PHP)
   * Carlire (Desktop application to manage e-books)
   * Fortlan language.

RE: Ask questions for you
-------------------------

.. revealjs-notes:: 

   I'm sure you can answer yes to the first two of those questions.
   ---
   さっきの質問のうち、最初の2個にはもうYesと言えるでしょう。

* |:white_check_mark:| Do you know Sphinx?
* |:white_check_mark:| Do you see document generated by Sphinx?
* |:black_square_button:| Do you write document by Sphinx?

Inside of Sphinx
================

.. revealjs-notes::
   Now let's explain how Sphinx generates documentation.
   ---
   ここからは、Sphinxがどのようにドキュメントを生成するかを説明していきます。

How do Sphinx works to generate document.

4-step of working Sphinx
------------------------

.. revealjs-notes:: 

   The Sphinx documentation generation process consists of four steps:
   ---
   Sphinxがドキュメント生成の実行は4つのステップで構成されています。

* Init: Sphinx core application with extensions.
* Read: Parse "reStructuredText" and convert into "doctree" objects.
* Transform: Modify "doctree" objects.
* Write: Create document files from "doctree" objects.

.. revealjs-break::

.. revealjs-notes:: 

    簡単なフローチャートです。

.. mermaid:: graph/sphinx-step-0.mmd

.. revealjs-break::

.. revealjs-notes::

   * Init: Sphinx core application with extensions.
   * Init では、設定ファイルや引数からSphinxのコアを生成します。

.. mermaid:: graph/sphinx-step-1.mmd

.. revealjs-break::

.. revealjs-notes::

   * Read: Parse "reStructuredText" and convert into "doctree" objects.
   * Read: では、"reStructuredText"のパースを行い、"doctree"オブジェクトへの変換を行います。.

.. mermaid:: graph/sphinx-step-2.mmd

.. revealjs-break::

.. revealjs-notes::

   * Transform: Modify "doctree" objects.
   * Transform: 内部で"doctree"オブエクトの更新をします。

   For example, this includes translating into other languages ​​using i18n.
   たとえばi18nを利用した他言語への翻訳などが含まれます。

.. mermaid:: graph/sphinx-step-3.mmd

.. revealjs-break::

.. revealjs-notes::

   * Write: Create document files from "doctree" objects.
   * Write: "doctree" オブジェクトから、ファイルを出力します。

.. mermaid:: graph/sphinx-step-4.mmd

reStructuredText
----------------

.. revealjs-notes::

   Here we will explain reStructuredText, the standard input format for Sphinx.
   This is a markup language for describing plain text in a structured way, and is similar to Markdown.
   Personally, I think it is more extensible than Markdown.
   ---
   ここでSphinxの標準的な入力フォーマットであるreStructuredTextについての説明をします。
   これは、プレーンテキストを構造的に記述するためのマークアップ言語で、Markdownに似ています。
   個人的にはMarkdownを比較して、拡張性が高いと考えています。

reStructuredText is plain text format of lightweight markup
to write sttrucuted document.
This is like for Markdown, (but it is more extendable than MD)

.. revealjs-break::

.. revealjs-notes::

   One thing to know about the reStructuredText specification is that it has a mechanism called Directives and Roles.
   In addition to the standard ones, you can also define your own.
   ---
   reStructuredTextの仕様として知っておくとよい点は、DirectiveとRoleという仕組みがあることです。
   標準のもの以外にも、自分で定義することも出来ます。

Standard specs includes:

* Directive is block synxtax. It can have some attributes and content that has nested direvctives.
* Role is inline directive. It can have some parameters.
* Comment ``..`` only directive. Nested content is not used for output.

.. revealjs-break::

Example with Markdown

.. revealjs-notes:: 

   Let's compare reStructuredText and Markdown for text that has the same expression.
   
   Header text is expressed differently. In Markdown, a hash is placed at the beginning of the text, but in reStructuredText, a line is drawn below the text.
   Code blocks are also expressed differently. Markdown uses three backquotes, but reStructuredText declares two periods followed by the "code-block" declaration.
   ---
   同じ表現をしているテキストを、reStructuredTextとMarkdownを並べてみます。
   
   ヘッダーテキストの表現が違います。Markdownではテキストの先頭にハッシュが置かれていますが、reStructuredTextではテキストの下に線が引かれています。
   コードブロックの表現も違っています。Markdownでは3個のバッククオートが使われていますが、reStructuredTextではピリオド2個のあとにcode-blockという宣言が行われています。

.. container:: flex

   .. container:: size-1

      reStructuredText

      .. code-block:: rst

         Title
         =====

         Hello world.

         * List item 1
         * List item 2

         .. code-block:: python

            print("hello world")

   .. container:: size-1

      Markdown

      .. code-block:: markdown

         # Title

         Hello world.

         * List item 1
         * List item 2

         ```python
         print("Hello world")
         ```

Parse to doctree
----------------

.. revealjs-notes::

   In the read phase, a doctree object is generated from the reStructuredText, but here we will explain about doctrees.
   This is a Python object that has a tree structure.
   ---
   ReadフェーズではreStructuredTextからdoctreeオブジェクトを生成しますが、ここではdoctreeについて説明します。
   これは、木構造を持つPythonのオブジェクトです。

Reader convert from reStructuredText into node tree model.

.. revealjs-break::

.. revealjs-notes::

   The reStructuredText and doctree are lined up.
   Under the document node, which represents the entire source, there are section nodes, which represent the main text.
   Under those are title and paragraph nodes.
   When a subtitle appears, it becomes a child section, with titles, lists, and CodeBlocks lined up.
   ---
   reStructuredTextとdoctreeを並べています。
   ソース全体を表すdocumentノードの下に、本文を表すsectionノードがいます。
   その下には、titleノードparagraphノードがあります。
   サブタイトルが登場すると、そこからは子sectionとなり、title, list, CodeBlockが並んでいます。

.. container:: flex

   .. container:: size-1

      reStructuredText

      .. revealjs-code-block:: rst
         :data-line-numbers: 1-14|1,2|4|6,7|9,10|12-14|

         Title
         =====

         Hello world.

         Sub title
         ---------

         * List item 1
         * List item 2

         .. code-block:: python

            print("hello world")
   
   .. container:: size-1

      Doctree

      .. mermaid:: ./graph/doctree.mmd

Write content
-------------

.. revealjs-notes::

   After modifying the doctree object in the Transform phase,
   content is generated from the doctree object in the Write phase.
   ---
   Transformフェーズでdoctreeオブジェクトを変更したあとに、
   Writeフェーズでdoctreeオブジェクトからコンテンツの生成をします。

Write phase generate from doctree to files rules of itself.

.. revealjs-notes::

   The doctree object and HTML output are shown side by side.
   HTML is output according to the tree structure of the doctree.
   ---
   doctreeオブジェクトとHTML出力を並べています。
   doctreeの木構造に従ってHTMLが出力されています。

.. container:: flex

   .. container:: size-1

      Doctree

      .. mermaid:: ./graph/doctree.mmd

   .. container:: size-1

      reStructuredText

      .. revealjs-code-block:: html

         <section>
           <h1>Title</h1>
           <p>Hello world</p>
           <section>
             <h2>Sub title</h2>
             <ul>
               <li>List item1</li>
               <li>List item2</li>
             </ul>
             <code>
               <pre></pre>
             </code>
           </section>
         </section>
   
Extend Sphinx
=============

.. revealjs-notes:: 

   I have explained the steps for generating content using the Sphinx core.
   You can expect the necessary functionality using just the core.
   
   However, sometimes it is not enough.
   Next, we will explain how to extend Sphinx.
   ---
   Sphinx本体を使ったコンテンツの生成ステップについて説明しました。
   本体だけでも必要な機能を期待できます。
   
   しかし、それだけでは不足していることもあります。
   次は、Sphinxの拡張について説明します。
   
When you don't work by basic features,
what can you do?

Sphinx can extend by other Python project.
------------------------------------------

.. revealjs-notes::

   When using only Sphinx itself, there are times when you want to change the design of the document, use Markdown instead of reStructuredText, or display graphs in the document.
   This can be solved by installing the Sphinx extension depending on the scene.
   ---
   Sphinx本体のみを使用していると、「ドキュメントをデザインを変えたい」「reStructuredTextではなくMarkdownを使用したい」「ドキュメント内にグラフを表示したい」といったシーンがあります。
   シーンに応じてSphinx拡張をインストールすることで解決できます。

* When you want to change design of document.
* When you want to use Markdown as document source.
* When you want to display graphs in your document.

.. revealjs-fragments:: 

   We can install and use **Sphinx extensions**.

Popular extensions
------------------

.. revealjs-notes:: 

   Here are two popular Sphinx extensions.
   MyST-parser allows you to read Markdown during the read phase.
   sphinxcontrib-mermaid adds new directives to help you create diagrams using mermaid.js.
   You can find other Sphinx extensions by browsing the GitHub Trends.
   ---
   有名なSphinx拡張を2個紹介します。
   MyST-parserはReadフェーズでMarkdownを読み取れるようにします。
   sphinxcontrib-mermaidは、mermaid.jsを使った図の作成を補助する新しいディレクティブを追加します。
   GitHubのTrendを見ることで、他のSphinx拡張を探せます。

* | MyST-parser
  |   Enable to parse Markdown text with extended syntax.
* | sphinxcontrib-mermaid
  |   Render mermaid.js graph

See https://github.com/topics/sphinx-extension
to know more extensions.

Um, there are not extensions to realize that you want.
------------------------------------------------------

.. revealjs-notes:: 

   Sometimes you can't find a Sphinx extension that has the functionality you want.
   Of course, you can also write your own Sphinx extension.
   ---
   欲しい機能を持つSphinx拡張が見つからないときもあります。
   もちろん、Sphinx拡張は自作することも出来ます。

.. revealjs-fragments::

   You can create extensions!!

Very simple Sphinx extension
----------------------------

.. revealjs-notes::

   Creating a Sphinx extension is very simple:
   Create a Python module and define a setup function that takes one argument.
   ---
   Sphinx拡張を作るのは非常に簡単です。
   Pythonモジュールを作成して、引数を1つ受け取るsetup関数を定義してください。

Write ``my_extension.py``.

.. code-block:: python

   from sphinx.application import Sphinx

   def setup(app: Sphinx) -> dict:
       print("Working this extension!")
       # Call methods of app....
       return {}

.. revealjs-break::

.. revealjs-notes::

   Edit conf.py in the document and register the module you created in extensions.
   ---
   ドキュメントのconf.pyを編集して、exensionsに作成したモジュールを登録してください。

Edit your ``conf.py`` of document.

.. code-block:: python

   extensions = [
        # Register this!
        "my_extension",
   ]

.. revealjs-break::

.. revealjs-notes:: 

   If you start building the document in this state, the print command we just implemented will be executed.
   ---
   この状態でドキュメントのビルドを開始すれば、先ほど実装したprintが実行されています。

.. code-block:: console

   Running Sphinx v8.2.1
   loading translations [en]... done
   Working this extension!           <=== Inserted!!
   loading pickled environment... done
   building [mo]: targets for 0 po files that are out of date
   writing output...
   building [revealjs]: targets for 0 source files that are out of date
   updating environment: [extensions changed ('2')] 1 added, 0 changed, 0 removed
   reading sources... [100%] index
   looking for now-outdated files... none found
   pickling environment... done
   checking consistency... done
   preparing documents... done

Adding behaivors
----------------

.. revealjs-notes:: 
   
   The setup function is passed the Sphinx core application as an argument, so you can use methods on the application object to perform various extensions.
   ---
   setup関数には引数としてSphinxのコアアプリケーションが渡されます。
   よって、アプリケーションオブジェクトのメソッドを使って様々な拡張を行えます。

Sphinx core application provides many methods to extend behaviors of it.
And we can call every method in your ``setup()``. 

.. revealjs-break::

.. revealjs-notes:: 

   Here are some commonly used methods.
   For example, the connect method handles specific events within Sphinx.
   So, what kind of timing events are there?
   ---
   よく使うメソッドを紹介します。
   例えば、connectメソッドはSphinx内の特定イベントに対して処理をつかします。
   では、どのようなタイミングのイベントがあるでしょうか。

.. 
   * - `add_config_value`
     - Add new configuration definition
   * - `add_directive`
     - Add new directive for writers.
   * - `add_builder`
     - Add new output format engine.
   * - `connect`
     - Set event handler of Sphinx events.

* ``add_config_value()``
* ``add_directive()``
* ``add_builder()``
* ``connect()``

ref: `Sphinx documentation <https://www.sphinx-doc.org/en/master/extdev/appapi.html#module-sphinx.application>`_

Sphinx has many "events"
------------------------

.. revealjs-notes::

   Here is an image summarizing the events from the Sphnx documentation.
   ---
   これは、Sphnxのドキュメントにあるイベントをまとめた画像です。

.. figure:: https://www.sphinx-doc.org/en/master/_images/graphviz-8f41e3505b1f58d16c8c77a9ed7d9562fac30e74.png
   :width: 80%

.. revealjs-break::

.. revealjs-notes::

   You don't need to know everything, just research it as you need to.
   ---
   全部を知る必要はありません。必要に応じて調べましょう。

.. container:: r-fit-text

   MANY!!

Please read docs when you need.

sphinx-revealjs
===============

.. revealjs-notes:: 

   So far, I've provided an overview of Sphinx extensions.
   Next, I'll explain about sphinx-revealjs, an OSS project I'm developing.
   ---
   ここまででSphinx拡張についての概要を説明しました。
   続いて、私が開発しているOSSプロジェクトのsphinx-revealjsについて説明します。

Introduction of the one of my OSS.

What is sphinx-revealjs?
------------------------

.. revealjs-notes:: 

   sphinx-revealjs is an extension that adds new builders and directives to Sphinx.
   -
   It allows you to generate presentations from reStructuredText.
   -
   Just change the builder specification from html to revealjs to use it easily.
   ---
   sphinx-revealjsはSphinxに新しいビルダーとディレクティブを追加する拡張です。
   -
   reStructuredTextからプレゼンテーションを生成できるようになります。
   -
   ビルダーの指定をhtmlからrevealjsに変えるだけで簡単に使えます。
   
sphinx-revealjs is Sphinx extension to add new builder with modules.

You can:

* generate html presentation from reStructuredText/Markdown.
* use very easy (call ``make revealjs`` instead of ``make html``)

.. revealjs-break:: 

.. revealjs-notes:: 

   Reveal.js is a JavaScript HTML presentation library.
   Therefore, you can take advantage of both the Sphnix and Reveal.js ecosystems.   
   ---
   Reveal.jsはJavaScript製のHTMLプレゼンテーションライブラリです。
   そのため、SphnixとReveal.jsのどちらのエコシステムを利用できます。

.. container:: flex

   .. container:: size-2

      Sphinx x Reveal.js

      * | Work on Sphinx ecosystem
        | = Supports many Sphinx extensions
      * Layout by Reveal.js and work on ecosystem.

   .. container:: size-1

      .. image:: _static/images/sphinx-logo.svg
         :width: 240px
      
      .. image:: _static/images/reveal-symbol.svg
         :width: 240px

Motivation
----------

.. revealjs-notes:: 

   What motivated you to develop this?
   -
   Firstly, I wanted to use reStructuredText instead of Markdown as the source for my presentations.
   Secondly, I wanted to take advantage of the rich content of the Sphinx extension.
   ---
   これを開発したモチベーションは何でしょうか。
   -
   一つは、プレゼンテーションのソースにMarkdownよりreStructuredTextを使いたかったためです。
   もう一つは、Sphinx拡張の豊富なコンテンツを利用したかったためです。

* I want to use reStructuredText than Makdown.
* I want to use Sphinx extensions that output good design contents

Demo
----

.. revealjs-notes:: 

   This is a demo of what will be generated, and the presentation itself is a demo.
   I will share the GitHub repository and the URL of the generated page. Try displaying it locally as well.
   ---
   どのようなものが生成されるかのデモですが、このプレゼンテーション自体がデモとなっています。
   GitHubのリポジトリと生成したページのURLを共有します。ローカルでも表示させてみてください。

**This presentation is also made by sphinx-revealjs!!**

* | Website: 
  | https://attakei.github.io/the-slide/
* | Repository:
  | https://github.com/attakei/the-slide/

This works on "Init" and "Write" phases
---------------------------------------

.. revealjs-notes:: 

   sphinx-revealjs runs in the Init and Write phases.
   In the Write phase, it generates HTML that follows the Reveal.js rules.
   ---
   sphinx-revealjsはInitとWriteのフェーズで動きます。
   Writeフェーズでは、Rveal.jsのルールに従ったHTMLを生成します。

Writer create HTML that is for Reveal.js format instead of documentation format.

.. revealjs-break:: 

.. revealjs-notes::

   Here is a very simple reStructuredText source.

.. code-block:: rst

    Title
    =====

    Sub title
    ---------

.. revealjs-break:: 

.. revealjs-notes:: 

   The output of the HTML builder and Revealjs builder are shown side by side.
   The HTML builder outputs nested section elements that match the structure.
   The Revealjs builder outputs fixed nested section elements.
   ---
   HTMLビルダーとRevealjsビルダーの出力結果を並べています。
   HTMLビルダーは、構造に合わせてネストされたsection要素を出力します。
   Revealjsビルダーは、固定ネストされたsection要素を出力します。

.. container:: flex

   .. container:: size-1

      HTML builder

      .. code-block:: html

         <section>
           <h1>Title</h1>
           <section>
             <h2>Sub title</h2>
           </section>
         </section>

   .. container:: size-1

      Revealjs builder

      .. code-block:: html

         <section>
           <section>
             <h1>Title</h1>
           </section>
         </section>
         <section>
           <section>
             <h2>Sub title</h2>
           </section>
         </section>

Architecture 
------------

.. revealjs-notes:: 

   Next, we will introduce the internal structure of sphinx-revealjs.
   In addition to the builder explained earlier, we will add new directives and configuration items.
   ---
   次にsphinx-revealjsの内部構造を紹介します。
   先ほど説明したビルダーの他に、新しいディレクティブや設定項目を追加します。

* Register new direvctives, builders, and configurations
* Builder use custom writer to generate HTML for Reveal.js.
* Custom writer handles added direvctives for good layout.

.. revealjs-break::

.. revealjs-notes::

   There are many directives to add.
   I will explain some of these.
   ---
   追加するディレクティブは多いです。
   このうちいくつかを解説します。

Added directives.

* ``revealjs-slide`` , ``revealjs-slide`` , ``revealjs-vertical`` 
* ``revealjs-break``
* ``revealjs-notes``
* ``revealjs-code-block``, ``revealjs-fragments``

``revealjs-break``
------------------

.. revealjs-notes:: 

   The "revealjs-break" directive splits a slide into two slides with the same title.
   This is useful when you want to talk about the same content consecutively.
   ---
   "revealjs-break" ディレクティブは、スライドを同じタイトルのまま2枚に分割します。
   同じ内容を続けて話すときに便利です。

This is to split slides keeping section title.

.. container:: flex

    .. container:: size-1

        .. code-block:: rst

            Section 1
            ---------

            .. revealjs-break::

    .. container:: size-1

        .. mermaid::

           flowchart LR
               subgraph 'Some v-section'
                   direction TB
                   S1[title=Section1] --> S2[title=Section1]
               end

``revealjs-notes``
------------------

.. revealjs-notes:: 

   The "revealjs-notes" directive outputs nested content into speaker notes.
   These won't be displayed in the presentation, but the speaker can still see them.
   I also use it to manage the script for this talk.
   ---
   "revealjs-notes" ディレクティブは、ネストされたコンテンツをスピーカーノートに出力します。
   この中身はプレゼンテーション上には表示されませんが、スピーカーは確認することが出来ます。
   このトークのスクリプトもこれを使って管理しています。

This is to manage speaker note per slides.
Contents of this is hidden from readers.

.. code-block::

   .. revealjs-notes::

      This text does not display on presentation.
      But, speaker can read from speaker-note.

.. revealjs-notes::

    This text does not display on presentation.
    But, speaker can read from speaker-note.

``revealjs-code-block``
-----------------------

.. revealjs-notes:: 

   The "revealjs-code-block" directive is an extension of the regular "code-block" directive.
   It has all the elements needed for Revealjs's code display feature, and allows you to highlight code line by line.
   ---
   "revealjs-code-bloxk" ディレクティブは、通常の"code-block"ディレクティブを拡張したものです。
   Revealjsのコード表示機能に必要な要素を持ち、コードを行単位でハイライトできます。

This is to extend Sphinx's ``code-block`` using animation.

.. revealjs-code-block:: rst
   :data-line-numbers: 1,2|4-5|7|8|9|7-9

   .. revealjs-code-block:: rst
      :data-line-numbers: 1,2|4-5|7|8|9|7-9

      Hello world
      ===========

      * List item 1
      * List item 2
      * List item 3

Benefits for users
------------------

.. revealjs-notes:: 

   I have introduced sphinx-revealjs, but what are the benefits?
   You can write presentations in the same way as documentation.
   You can embed a lot of content using Python through the Sphinx extension.
   You can manage the source of content in plain text, which makes it easier to manage in the repository.
   ---
   sphinx-revealjsの紹介をしましたが、どのような利益があるでしょうか？
   ドキュメンテーションと同じ手法でプレゼンテーションを書けるようになります。
   Sphinx拡張を通じてPythonを利用した多くのコンテンツを埋め込めます。
   コンテンツのソースをプレーンテキストで管理できるようになります。これはリポジトリ上で管理することが容易になります。

* you can write presentations by as same as documentation.
* you can embed many contents from Python as Sphinx extensions.
* you can manage content as plain-text that is easy to manager on repository.

.. revealjs-break::

.. revealjs-notes:: 

   Managing it on GitHub would allow you to check the quality of your content with GitHub Actions, deploy your content to GitHub Pages, and potentially make this content more searchable with GitHub Copilot.
   ---
   GitHub上で管理できると、コンテンツのクオリティをGitHub Actionsで確認したり、コンテンツをGitHub Pages上にデプロイできるようになります。
   また、GitHub Copilotがこの内容を検索しやすくするかもしれません。

When content manage in GitHub...

* Check content by GitHub Actions.
* Deploy content to GitHub Pages.
* It may search easily by GitHub Copilot.

Benefits (only for me)
-----------------------

.. revealjs-notes:: 
   
   As an OSS author, I got the following benefits: I got feedback from some users. 
   It was used to showcase a product at a certain organization.
   And I got the chance to give a talk at PyCon.
   This is a virtuous cycle that helps maintain motivation.
   ---
   OSSの作者の立場としては、次のような利益がありました。
   何人かのユーザーからフィードバックをもらえること。とある組織でプロダクト紹介に使われていること。そして、PyConでトークする機会を得られたこと。
   これはモチベーションの維持につながる良い循環となっています。   

* Geven feedback that this is used by few enginieers but world wide.
* Gain use caes by community: presentation about OSGeoLive by OSGeo.
* Get a chance to talk on PyCon outside of Japan.

**It's a good loop of motivation for OSS writer!**

Show cases
==========

.. revealjs-notes:: 

   Finally, we'll provide a showcase of presentations using other Python libraries.
   ---
   最後に、他のPythonライブラリを使ったプレゼンテーションのショーケースをお見せします。

Examples of using other Sphinx extensions.

oEmbedPy
--------

.. revealjs-notes:: 

   "oEmbedPy" is a library that handles oEmbed, a unified standard for embedding content. You can embed actual content simply by pasting the URL of a website that uses oEmbed.   
   ---
   "oEmbedPy" はoEmbedというコンテンツ埋め込みの統一規格を扱うライブラリで、oEmbedを採用しているWebサイトのURLを貼るだけで、実際のコンテンツを埋め込むことが出来ます。

.. code-block:: rst

   ..
      This is URL of Opening Remarks of PyCon PH 2024

   .. oembed:: https://www.youtube.com/watch?v=Cu9JIdlbnbc
      :maxwidth: 720
      :maxheight: 720

.. revealjs-break::

.. oembed:: https://www.youtube.com/watch?v=Cu9JIdlbnbc
   :maxwidth: 720
   :maxheight: 720

Plotly
------

.. revealjs-notes:: 

   "Plotly" is a library that can display graphs.
   It has a Sphinx extension that can display graphs of variables specified in directive options.
   ---
   "Plotly"  はグラフを表示することができるライブラリです。
   Sphinx拡張が存在しており、ディレクティブのオプションで指定した変数をグラフ表示できます。

.. code-block:: rst

   .. plotly:: 
      :fig-vars: fig1, fig2
      :include-source: false

      x = np.arange(5)
      y = x ** 2

      title = "plotly version: {}".format(plotly.__version__)
      fig1 = go.Figure(go.Scatter(x=x, y=y), layout=dict(title=title))
      fig2 = px.scatter(x=x, y=y, title=title)

.. revealjs-break::
   :notitle:

.. plotly::
   :fig-vars: fig1, fig2
   :include-source: false

   x = np.arange(5)
   y = x ** 2

   title = "plotly version: {}".format(plotly.__version__)
   fig1 = go.Figure(go.Scatter(x=x, y=y), layout=dict(title=title))
   fig2 = px.scatter(x=x, y=y, title=title)

PyVista
-------

.. revealjs-notes:: 

   "PyVista" is a library that can display 3D objects.
   It has a Sphinx extension and displays the contents specified in the directive options. In the "Interactive Scene" you can actually move the angle of the object.
   ---
   "PyVista"  は3Dオブジェクトを表示することができるライブラリです。
   Sphinx拡張が存在しており、ディレクティブのオプションで指定した内容を表示します。"Interactive Scene"では実際にオブジェクトの角度を動かすことも出来ます。

.. code-block:: rst

   .. pyvista-plot::

      >>> import pyvista
      >>> sphere = pyvista.Sphere()
      >>> out = sphere.plot()

.. revealjs-break::
   :notitle:

.. pyvista-plot::

   >>> import pyvista
   >>> sphere = pyvista.Sphere()
   >>> out = sphere.plot()

asciinema
---------

.. revealjs-notes:: 

   "asciinema" is a library for recording the state of the terminal.
   demo.cast is a special format, but you can display it as a video by writing directives.
   ---
   "asciinema"はターミナルの様子を録画するためのライブラリです。
   demo.castは専用のフォーマットですが、ディレクティブを記述することで動画として表示させることが出来ます。

.. code-block:: rst

   .. asciinema:: ./demo.cast
      :preload: 1
      :autoplay: 1
      :rows: 15
      :cols: 80
      :terminalfontsize: 16px

.. revealjs-break::

.. asciinema:: ./demo.cast
   :preload: 1
   :autoplay: 1
   :rows: 15
   :cols: 80
   :terminalfontsize: 16px

sphinx-nekochan
---------------

.. revealjs-notes:: 
 
   "sphinx-nekochan" allows you to display cute cat emojis in your documents.
   ---
   "sphinx-nekochan"はドキュメントに可愛い猫の絵文字を表示させることが出来ます。

.. code-block:: rst

   .. container:: r-fit-text
   
      :nekochan:`clap-nya;3em`
      :nekochan:`beer-nya;3em`
      :nekochan:`isogu-nya;3em`
      :nekochan:`jikan-nya;3em`
      
      :nekochan:`kamon-nya;3em`
      :nekochan:`kiku-nya;3em`
      :nekochan:`mita-nya;3em`
      :nekochan:`peace-nya;3em`

.. revealjs-break:: 

.. revealjs-notes:: 
 
   There are a lot of cats in the Philippines.
   ---
   フィリピンには猫がいっぱいいますね。

.. container:: r-fit-text

   :nekochan:`clap-nya;3em`
   :nekochan:`beer-nya;3em`
   :nekochan:`isogu-nya;3em`
   :nekochan:`jikan-nya;3em`
   
   :nekochan:`kamon-nya;3em`
   :nekochan:`kiku-nya;3em`
   :nekochan:`mita-nya;3em`
   :nekochan:`peace-nya;3em`

There are many cats in Philippines!!

Enjoy presentation by documentation!!
=====================================

.. revealjs-notes:: 

   This concludes my presentation.
   If you are interested in this presentation generator, please try it out.
   Thank you very much.
   ---
   以上で発表を終わります。
   もしこのプレゼンテーション生成に興味が湧いたら、使ってみてください。
   ありがとう。